const input = {
    "keys": {
        "n": 9,
        "k": 6
    },
    "1": {
        "base": "10",
        "value": "28735619723837"
    },
    "2": {
        "base": "16",
        "value": "1A228867F0CA"
    },
    "3": {
        "base": "12",
        "value": "32811A4AA0B7B"
    },
    "4": {
        "base": "11",
        "value": "917978721331A"
    },
    "5": {
        "base": "16",
        "value": "1A22886782E1"
    },
    "6": {
        "base": "10",
        "value": "28735619654702"
    },
    "7": {
        "base": "14",
        "value": "71AB5070CC4B"
    },
    "8": {
        "base": "9",
        "value": "122662581541670"
    },
    "9": {
        "base": "8",
        "value": "642121030037605"
    }
};

// Function to parse and convert values from different bases to BigInt
function parseInput(input) {
    const { n, k } = input.keys;
    let points = [];

    for (let i = 1; i <= n; i++) {
        if (input[i]) {
            const base = parseInt(input[i].base, 10);
            const value = BigInt(parseInt(input[i].value, base));  // Use BigInt for large numbers
            points.push([BigInt(i), value]);  // Use i as x-coordinate, value as y-coordinate
        }
    }
    return { n, k, points };
}

// Function to compute the Lagrange basis polynomial using BigInt
function lagrangeInterpolation(points, k) {
    let constantTerm = BigInt(0);

    for (let i = 0; i < k; i++) {
        let xi = points[i][0];
        let yi = points[i][1];
        let li = BigInt(1);

        // Compute the Lagrange basis polynomial l_i(0)
        for (let j = 0; j < k; j++) {
            if (i !== j) {
                let xj = points[j][0];
                li *= (BigInt(0) - xj) / (xi - xj);  // Use BigInt for accurate division
            }
        }

        // Add the term to the constant (P(0))
        constantTerm += yi * li;
    }

    return constantTerm;
}

// Function to reconstruct the polynomial and identify potential incorrect roots
function findIncorrectRoots(input) {
    const { n, k, points } = parseInput(input);

    // Find the secret using all the points
    const reconstructedSecret = lagrangeInterpolation(points, k);

    // Try removing one point at a time and checking if the secret changes significantly
    let incorrectRoots = [];

    for (let i = 0; i < n; i++) {
        let subset = points.filter((_, idx) => idx !== i);  // Exclude the i-th point
        if (subset.length >= k) {
            let subsetSecret = lagrangeInterpolation(subset, k);

            // Instead of using a fixed threshold, we use a relative comparison
            let diff = reconstructedSecret - subsetSecret;
            let relativeDiff = diff / reconstructedSecret;

            // If the relative difference is significant, mark as incorrect
            if (relativeDiff > 0n || relativeDiff < 0n) {  // Use BigInt comparison
                incorrectRoots.push(points[i]);
            }
        }
    }

    return incorrectRoots;
}

// Main function to check and output incorrect roots
function findAndCheckIncorrectRoots(input) {
    const incorrectRoots = findIncorrectRoots(input);
    if (incorrectRoots.length > 0) {
        console.log("Potential incorrect roots:", incorrectRoots);
    } else {
        console.log("No incorrect roots found.");
    }
}

// Output the result
findAndCheckIncorrectRoots(input);
